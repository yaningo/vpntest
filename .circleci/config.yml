version: 2.1
jobs:
  test-vpn:
    machine:
      image: ubuntu-1604:201903-01
      
    steps:
     # - add_ssh_keys:
     #     fingerprints:
     #       - "29:a6:37:58:fd:c2:c9:1a:55:b1:5f:65:03:f1:06:ef"    
      - run:
          name: Install OpenVPN
          command: |
            sudo apt-get update -y && sudo apt-get install openvpn
            #sudo apt-get install network-manager-openvpn -y
            #sudo apt-get upgrade openvpn
            #sudo openvpn --version
            
      - run:
          name: Install systemd
          command: sudo apt-get install -y systemd
        
      - run:
          name: Init le VPN
          command: |
            #echo "$VPN_CONFIG" > raw.txt
            #cat raw.txt | tr " " "\n" | base64 --decode >> config.ovpn
            echo $VPN_CONFIG | base64 --decode >> config.ovpn
            #printf "\"$VPN_USER\\n$VPN_PASSWORD\\n\"" >> vpn.login
            #printf "$VPN_USERNAME\n$VPN_PASSWORD\n" >> vpn.login
            echo "Public IP is $(wget -qO- http://checkip.amazonaws.com | tee initial.ip)"
            

      - run:
          command: |
            # Check if OPENVPN_CLIENT_INSTALLED is 0 and decide to proceed install
            if [[ $OPENVPN_CLIENT_INSTALLED == 0 ]]
            then
              echo "Skip installing and configure vpn client service"
            else
              # OpenVPN 2.4.x is required for AES-256-GSM
              sudo sh -c "curl -s https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -"
              sudo sh -c 'echo "deb http://build.openvpn.net/debian/openvpn/stable xenial main" > /etc/apt/sources.list.d/openvpn-aptrepo.list'
              sudo apt-get -q -y update
              sudo apt-get -q -y install openvpn

              # Configure openvpn-client.service
              sudo sh -c "cat \<<EOF > /etc/systemd/system/openvpn-client.service
            [Unit]
            Description=OpenVPN Client
            After=syslog.target network.target
            [Service]
            PrivateTmp=true
            Type=simple
            PIDFile=/var/run/openvpn/inf.pid
            ExecStart=/usr/sbin/openvpn --cd /etc/openvpn/ --config config.ovpn
            [Install]
            WantedBy=multi-user.target"

              # Reload systemd manager configuration. Reloading systemctl will be failed with docker executor because it's privileged=false
              sudo systemctl daemon-reload

              # Set environment variable to flag intall step is done.
              echo "export OPENVPN_CLIENT_INSTALLED=0" >> $BASH_ENV
            fi
          name: Install OpenVPN 2.4.x and configure openvpn-client.service
          
      - run:
          name: Configure OpenVPN config file /etc/openvpn/config.ovpn with parameter config
          command: echo ${VPN_CONFIG} | base64 --decode | sudo tee /etc/openvpn/config.ovpn 1>/dev/null
        
      - run:
          name: Configure OpenVPN credential file /etc/openvpn/vpn.login with parameter username and password
          command: |
            echo ${VPN_USER} | sudo tee /etc/openvpn/vpn.login 1>/dev/null
            echo ${VPN_PASSWORD} | sudo tee -a /etc/openvpn/vpn.login 1>/dev/null
        
      - run:
          command: "for n in {1..5}\ndo\n  echo \"Connection attempt $n\"\n  sudo systemctl restart openvpn-client\n  timeout 30 \\\n    bash -c 'until systemctl status openvpn-client | grep \"Initialization Sequence Completed\" > /dev/null; do sleep 1 | echo \"connecting vpn...\" ; done' || \\\n    timeout_rtrn_code=$?\n  if [[ -z $timeout_rtrn_code || $timeout_rtrn_code == 0 ]]\n  then\n    echo \"Connected to VPN successfully\" && break\n  else\n    echo \"Connection attempt $n has timed out\"\n    if [[ $n == 5 ]]; \n    then \n      echo \"VPN connection has failed. Error: $timeout_rtrn_code\" && exit $timeout_rtrn_code\n    else\n      echo \"VPN connection has failed but will retry in 5 seconds. Error: $timeout_rtrn_code\"\n      sudo systemctl stop openvpn-client\n      unset timeout_rtrn_code\n    fi\n  fi\n  sleep 45\ndone"
          name: Start OPENVPN client and wait for connection to be made
          
      - run:
          name: Do stuff in our infrastructure
          command: |
            route -n
            ifconfig -a
            #while [ -n "$(ip addr show tun0 2>&1 > /dev/null)" ]; do
            #  sleep 1;
            #done
            echo "VPN client connected"
            echo "Public IP is $(wget -qO- http://checkip.amazonaws.com | tee initial.ip)"

            
workflows:
  version: 2
  build-and-release:
    jobs:
    - test-vpn
